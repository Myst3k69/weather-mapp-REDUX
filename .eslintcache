[{"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\index.js":"1","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\App.js":"2","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\HomePage.js":"3","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Weather.js":"4","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\store.js":"5","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\index.js":"6","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\isLogged.js":"7","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\actions\\index.js":"8","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\cityList.js":"9","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\services\\useAPI.js":"10","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Nav.js":"11","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\LineChart.js":"12","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\RadarChart.js":"13","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\selectCity.js":"14","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Alert.js":"15"},{"size":434,"mtime":1607783335883,"results":"16","hashOfConfig":"17"},{"size":400,"mtime":1607830398059,"results":"18","hashOfConfig":"17"},{"size":3326,"mtime":1607886660600,"results":"19","hashOfConfig":"17"},{"size":2923,"mtime":1607829662421,"results":"20","hashOfConfig":"17"},{"size":259,"mtime":1607830405659,"results":"21","hashOfConfig":"17"},{"size":311,"mtime":1607805110229,"results":"22","hashOfConfig":"17"},{"size":184,"mtime":1607680080524,"results":"23","hashOfConfig":"17"},{"size":628,"mtime":1607828360626,"results":"24","hashOfConfig":"17"},{"size":544,"mtime":1607830500134,"results":"25","hashOfConfig":"17"},{"size":1565,"mtime":1607830458289,"results":"26","hashOfConfig":"17"},{"size":1296,"mtime":1607830518675,"results":"27","hashOfConfig":"17"},{"size":3201,"mtime":1607829394285,"results":"28","hashOfConfig":"17"},{"size":2747,"mtime":1607830433077,"results":"29","hashOfConfig":"17"},{"size":217,"mtime":1607830480568,"results":"30","hashOfConfig":"17"},{"size":509,"mtime":1607866238576,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"crrxxl",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"35"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"35"},"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\index.js",["71"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store'\nimport {Provider, provider} from 'react-redux'\n\n\n\nimport { BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n",["72","73"],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\App.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\HomePage.js",["74","75","76","77","78","79"],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Weather.js",["80","81","82","83","84","85","86","87"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport LineChart from \"./LineChart\";\r\nimport RadarChart from \"./RadarChart\";\r\nimport Nav from \"./Nav\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useFetch from \"../services/useAPI\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { login } from \"../actions\";\r\nimport { resetCity } from \"../actions\";\r\nimport { seletCity } from \"../actions\";\r\nimport { CRow, CCol } from \"@coreui/react\";\r\n\r\nimport(\"../App.css\");\r\nimport(\"react-loader-spinner/dist/loader/css/react-spinner-loader.css\");\r\n\r\nconst Weather = () => {\r\n  // History\r\n\r\n  let history = useHistory();\r\n  // Store\r\n  const cityList = useSelector((state) => state.cities);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //custom Hook\r\n  const [loader, setLoader] = useFetch(cityList);\r\n\r\n  //Constants\r\n\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\n  //states\r\n  const [temp, setTemp] = useState();\r\n  const [findedCity, setFindedCity] = useState(true);\r\n\r\n  // Function to clean datas before coming back on Home Page\r\n\r\n  const backHome = () => {\r\n    history.push(\"/\");\r\n    dispatch(seletCity(\"\"));\r\n    dispatch(resetCity());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loader == true) {\r\n      dispatch(login());\r\n    }\r\n  }, [loader]);\r\n\r\n  return (\r\n    <>\r\n      {/* Display a loader while API fetching */}\r\n\r\n      {!loader ? (\r\n        <Loader\r\n          type=\"Puff\"\r\n          color=\"#00BFFF\"\r\n          height={100}\r\n          width={100}\r\n          style={{ marginLeft: \"50%\", marginTop: \"20%\" }}\r\n        />\r\n      ) : (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <h1>React Weather App</h1>\r\n\r\n            <button className=\"homeButton\" onClick={() => backHome()}>Autres villes </button>\r\n          </header>\r\n          {/* Display error message if city has not been found */}\r\n          {cityList.length > 0 ? (\r\n            <>\r\n              {/* Change the background hot/cold depending on temperature */}\r\n\r\n              <main>\r\n                <CRow>\r\n                  <CCol md=\"2\">\r\n                    <Nav className=\"navCity\"></Nav>\r\n                  </CCol>\r\n                  <CCol md=\"5\">\r\n                    <LineChart></LineChart>\r\n                  </CCol>\r\n                  <CCol md=\"5\">\r\n                    <RadarChart></RadarChart>\r\n                  </CCol>\r\n                </CRow>\r\n              </main>\r\n\r\n              <footer>\r\n                <h3>Test technique SAFECUBE</h3>{\" \"}\r\n              </footer>\r\n            </>\r\n          ) : (\r\n            <h3 style={{ textAlign: \"center\" }}>\r\n              Ville non trouv√©e. Merci de saisir un autre nom de ville :{\" \"}\r\n              <Link to=\"/\">Ici</Link>\r\n            </h3>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\store.js",["88"],"import { createStore, combineReducers } from \"redux\";\r\nimport allReducers from \"./reducers\";\r\n\r\n// STORE\r\nconst store = createStore(\r\n  allReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\index.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\isLogged.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\actions\\index.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\cityList.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\services\\useAPI.js",["89","90"],"import { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { updateCity } from \"../actions\";;\r\nconst axios = require(\"axios\");\r\n\r\nexport default function useFetch(cityList) {\r\n  //State\r\n\r\n  const [loader, setLoader] = useState();\r\n\r\n  // Constants\r\n\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\n  // Store\r\n  const dispatch = useDispatch();\r\n\r\n  // Function\r\n\r\n  const currentWeather = (city, apiKey) => {\r\n    axios\r\n      .get(\r\n        `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`\r\n      )\r\n      .then((response) => {\r\n        OnecallAPI(\r\n          response.data[\"coord\"].lat,\r\n          response.data[\"coord\"].lon,\r\n          apiKey,\r\n          city\r\n        );\r\n      })\r\n\r\n      .catch((err) => {\r\n        console.log(\"err response : \", err);\r\n      });\r\n  };\r\n\r\n  const OnecallAPI = (lat, lon, apiKey, city) => {\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=hourly,minutely&appid=${apiKey}`\r\n      )\r\n      .then((response) => {\r\n        dispatch(\r\n          updateCity(\r\n            city,\r\n            { lat: response.data.lat, lon: response.data.lon },\r\n            response.data.daily\r\n          )\r\n        );\r\n      })\r\n\r\n      .catch((err) => {});\r\n  };\r\n\r\n  // Api Call\r\n\r\n  useEffect(() => {\r\n    cityList.map((cit) => currentWeather(cit.city, apiKey));\r\n    setTimeout(() => {\r\n      setLoader(true);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  return [loader, setLoader];\r\n}\r\n","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Nav.js",["91","92"],"import React, { useEffect, useState } from \"react\";\r\nimport { CCard, CCardBody, CNav, CNavItem, CNavLink } from \"@coreui/react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { seletCity } from \"../actions\";\r\n\r\nconst Nav = () => {\r\n  // Store\r\n  const cityList = useSelector((state) => state.cities);\r\n  const isLogged = useSelector((state) => state.isLogged);\r\n  const selectedCity = useSelector((state) => state.selectedCity);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {});\r\n\r\n  // Const\r\n  const [activeLink, setActiveLink] = useState(0);\r\n\r\n  const selectCity = (i, city) => {\r\n    setActiveLink(i);\r\n    dispatch(seletCity(city));\r\n  };\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardBody>\r\n        S√©lection des villes\r\n        <hr></hr>\r\n        <CNav variant=\"pills\" vertical>\r\n          {cityList.map((cit, i) => {\r\n            return (\r\n              <CNavItem>\r\n                <CNavLink\r\n                  id={i}\r\n                  className={activeLink === i ? \"active\" : \"\"}\r\n                  onClick={() => selectCity(i, cit.city)}\r\n                >\r\n                  {cit.city}\r\n                </CNavLink>\r\n              </CNavItem>\r\n            );\r\n          })}\r\n        </CNav>\r\n      </CCardBody>\r\n    </CCard>\r\n  );\r\n};\r\nexport default Nav;\r\n","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\LineChart.js",["93","94","95","96","97"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { CCard, CCardBody, CCardHeader } from \"@coreui/react\";\r\nimport { CChartLine, CChartRadar } from \"@coreui/react-chartjs\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n\r\nimport(\"../App.css\");\r\n\r\nconst LineChart = () => {\r\n  // Store\r\n  const cityList = useSelector((state) => state.cities);\r\n  const selectedCity = useSelector((state) => state.selectedCity);\r\n  const [dateForecast, setDateForecast] = useState();\r\n  const [temperature, setTemperature] = useState([]);\r\n\r\n  //Function to get datas for line chart\r\n\r\n  const getTemps = (selectedCity, cityList) => {\r\n    if (selectedCity) {\r\n      const selected = cityList.filter(\r\n        (city) => city.city == selectedCity[0].selectedCity\r\n      );\r\n\r\n      if (selected) {\r\n        //Get forecast days\r\n        getForecastDays(selected);\r\n\r\n        // Get datas for radar chart\r\n        const radarDatas = selected[0].forecastTemp.map((day) => {\r\n          const datas = {};\r\n          datas.humidity = day.clouds;\r\n          datas.uvi = day.uvi;\r\n          datas.pressure = day.pressure;\r\n          datas.winspeed = day.wind_speed;\r\n          datas.pop = day.pop;\r\n          datas.icon = `http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`;\r\n\r\n          return datas;\r\n        });\r\n\r\n        // Get temperatures\r\n        const forecastTemp = selected[0].forecastTemp.map(\r\n          (day) => day.temp[\"day\"]\r\n        );\r\n\r\n        return forecastTemp;\r\n      }\r\n    } else {\r\n      const forecastTemp = cityList[0].forecastTemp.map(\r\n        (day) => day.temp[\"day\"]\r\n      );\r\n      return forecastTemp;\r\n    }\r\n  };\r\n\r\n  //Function to get forecast days\r\n  const getForecastDays = (selected) => {\r\n   \r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n\r\n    const forecastDays = selected[0].forecastTemp.map((day, i) => {\r\n      const dayWeather = [];\r\n      dayWeather[i] = days[new Date(day.dt * 1000).getDay()];\r\n\r\n      return dayWeather;\r\n    });\r\n\r\n    //Set days in state for chart label\r\n\r\n    const filtered = forecastDays.filter((day, i) => day.splice(0, i));\r\n    setDateForecast(filtered);\r\n\r\n    return forecastDays;\r\n  };\r\n\r\n  useEffect(() => {\r\n   \r\n    setTemperature(getTemps(selectedCity, cityList));\r\n  }, [selectedCity]);\r\n\r\n  return (\r\n    <>\r\n      {temperature ? (\r\n        <CCard>\r\n          <CCardHeader>Pr√©visions des temp√©ratures </CCardHeader>\r\n          <CCardBody>\r\n            <CChartLine\r\n              type=\"line\"\r\n              label=\"Temperatures\"\r\n              datasets={[\r\n                {\r\n                  backgroundColor: \"rgb(228,102,81,0.9)\",\r\n                  label: \"Temperatures\",\r\n                  data: temperature,\r\n                 \r\n                },\r\n               \r\n              ]}\r\n              options={{\r\n                tooltips: {\r\n                  enabled: true,\r\n                },\r\n              }}\r\n              labels={dateForecast}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\RadarChart.js",["98","99"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { CCard, CCardBody, CCardHeader } from \"@coreui/react\";\r\nimport { CChartRadar } from \"@coreui/react-chartjs\";\r\n\r\nimport(\"../App.css\");\r\n\r\nconst RadarChart = () => {\r\n  // Store\r\n  const cityList = useSelector((state) => state.cities);\r\n  const selectedCity = useSelector((state) => state.selectedCity);\r\n\r\n  //State\r\n\r\n  const [radarData, setRadarData] = useState();\r\n  const [labelsRadar, setLabelsRadar] = useState();\r\n\r\n  //Function to get datas for line chart\r\n\r\n  const getDatasRadar = (selectedCity, cityList) => {\r\n    if (selectedCity) {\r\n      const selected = cityList.filter(\r\n        (city) => city.city == selectedCity[0].selectedCity\r\n      );\r\n\r\n      if (selected) {\r\n        // Get datas for radar chart\r\n        const radarDatas = selected[0].forecastTemp.map((day) => {\r\n          const datas = {};\r\n\r\n          // Data to show wind speed, humidity, etc, but don't fit with this type of chart\r\n          //datas.humidity = day.clouds;\r\n          // datas.uvi = day.uvi;\r\n          //datas.pressure = day.pressure;\r\n          // datas.winspeed = day.wind_speed;\r\n          // datas.pop = day.pop;\r\n          //datas.icon = `http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`;\r\n          datas.Min = day.temp.min;\r\n          datas.Day = day.temp.day;\r\n          datas.Evening = day.temp.eve;\r\n          datas.Max = day.temp.max;\r\n          datas.Morning = day.temp.morn;\r\n\r\n          return datas;\r\n        });\r\n\r\n        //set values for chart datas\r\n        setRadarData(Object.values(radarDatas[0]));\r\n        setLabelsRadar(Object.keys(radarDatas[0]));\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDatasRadar(selectedCity, cityList);\r\n  }, [selectedCity]);\r\n\r\n  return (\r\n    <CCard>\r\n      <CCardHeader>Ecarts de t√©mp√©rature au cours de la journ√©e </CCardHeader>\r\n      <CCardBody>\r\n        <CChartRadar\r\n          type=\"radar\"\r\n          datasets={[\r\n            {\r\n              label: \"Today\",\r\n              backgroundColor: \"rgba(179,181,198,0.2)\",\r\n              borderColor: \"rgba(179,181,198,1)\",\r\n              pointBackgroundColor: \"rgba(179,181,198,1)\",\r\n              pointBorderColor: \"#fff\",\r\n              pointHoverBackgroundColor: \"#fff\",\r\n              pointHoverBorderColor: \"rgba(179,181,198,1)\",\r\n              tooltipLabelColor: \"rgba(179,181,198,1)\",\r\n              data: radarData,\r\n            },\r\n          ]}\r\n          options={{\r\n            aspectRatio: 1.5,\r\n            tooltips: {\r\n              enabled: true,\r\n            },\r\n          }}\r\n          labels={labelsRadar}\r\n        />\r\n      </CCardBody>\r\n    </CCard>\r\n  );\r\n};\r\n\r\nexport default RadarChart;\r\n","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\selectCity.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Alert.js",["100"],"import React, { useState, useContext } from \"react\";\r\nimport { CAlert, CProgress } from \"@coreui/react\";\r\n\r\nconst Alert = (props) => {\r\n  const [visible, setVisible] = useState(5);\r\n\r\n  return (\r\n    <CAlert color={props.type} show={visible} closeButton onShowChange={setVisible}>\r\n      {props.message}\r\n      <CProgress\r\n        striped\r\n        color={props.type}\r\n        value={Number(visible) * 20}\r\n        size=\"xs\"\r\n        className=\"mb-3\"\r\n      />\r\n    </CAlert>\r\n  );\r\n};\r\n\r\nexport default Alert;",{"ruleId":"101","severity":1,"message":"102","line":6,"column":19,"nodeType":"103","messageId":"104","endLine":6,"endColumn":27},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"101","severity":1,"message":"109","line":16,"column":10,"nodeType":"103","messageId":"104","endLine":16,"endColumn":17},{"ruleId":"101","severity":1,"message":"110","line":16,"column":19,"nodeType":"103","messageId":"104","endLine":16,"endColumn":29},{"ruleId":"101","severity":1,"message":"111","line":17,"column":10,"nodeType":"103","messageId":"104","endLine":17,"endColumn":19},{"ruleId":"101","severity":1,"message":"112","line":17,"column":21,"nodeType":"103","messageId":"104","endLine":17,"endColumn":33},{"ruleId":"101","severity":1,"message":"113","line":18,"column":10,"nodeType":"103","messageId":"104","endLine":18,"endColumn":18},{"ruleId":"101","severity":1,"message":"114","line":18,"column":20,"nodeType":"103","messageId":"104","endLine":18,"endColumn":31},{"ruleId":"101","severity":1,"message":"115","line":28,"column":18,"nodeType":"103","messageId":"104","endLine":28,"endColumn":27},{"ruleId":"101","severity":1,"message":"116","line":32,"column":9,"nodeType":"103","messageId":"104","endLine":32,"endColumn":15},{"ruleId":"101","severity":1,"message":"117","line":35,"column":10,"nodeType":"103","messageId":"104","endLine":35,"endColumn":14},{"ruleId":"101","severity":1,"message":"118","line":35,"column":16,"nodeType":"103","messageId":"104","endLine":35,"endColumn":23},{"ruleId":"101","severity":1,"message":"119","line":36,"column":10,"nodeType":"103","messageId":"104","endLine":36,"endColumn":20},{"ruleId":"101","severity":1,"message":"120","line":36,"column":22,"nodeType":"103","messageId":"104","endLine":36,"endColumn":35},{"ruleId":"121","severity":1,"message":"122","line":47,"column":16,"nodeType":"123","messageId":"124","endLine":47,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":50,"column":6,"nodeType":"127","endLine":50,"endColumn":14,"suggestions":"128"},{"ruleId":"101","severity":1,"message":"129","line":1,"column":23,"nodeType":"103","messageId":"104","endLine":1,"endColumn":38},{"ruleId":"101","severity":1,"message":"130","line":2,"column":23,"nodeType":"103","messageId":"104","endLine":2,"endColumn":34},{"ruleId":"125","severity":1,"message":"131","line":65,"column":6,"nodeType":"127","endLine":65,"endColumn":8,"suggestions":"132"},{"ruleId":"101","severity":1,"message":"133","line":10,"column":9,"nodeType":"103","messageId":"104","endLine":10,"endColumn":17},{"ruleId":"101","severity":1,"message":"134","line":11,"column":9,"nodeType":"103","messageId":"104","endLine":11,"endColumn":21},{"ruleId":"101","severity":1,"message":"135","line":4,"column":22,"nodeType":"103","messageId":"104","endLine":4,"endColumn":33},{"ruleId":"101","severity":1,"message":"136","line":5,"column":23,"nodeType":"103","messageId":"104","endLine":5,"endColumn":34},{"ruleId":"121","severity":1,"message":"122","line":22,"column":29,"nodeType":"123","messageId":"124","endLine":22,"endColumn":31},{"ruleId":"101","severity":1,"message":"137","line":30,"column":15,"nodeType":"103","messageId":"104","endLine":30,"endColumn":25},{"ruleId":"125","severity":1,"message":"138","line":88,"column":6,"nodeType":"127","endLine":88,"endColumn":20,"suggestions":"139"},{"ruleId":"121","severity":1,"message":"122","line":25,"column":29,"nodeType":"123","messageId":"124","endLine":25,"endColumn":31},{"ruleId":"125","severity":1,"message":"140","line":58,"column":6,"nodeType":"127","endLine":58,"endColumn":20,"suggestions":"141"},{"ruleId":"101","severity":1,"message":"142","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":37},"no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["143"],"no-negated-in-lhs",["144"],"'cityTwo' is assigned a value but never used.","'setCityTwo' is assigned a value but never used.","'cityThree' is assigned a value but never used.","'setCityThree' is assigned a value but never used.","'cityFour' is assigned a value but never used.","'setCityFour' is assigned a value but never used.","'setLoader' is assigned a value but never used.","'apiKey' is assigned a value but never used.","'temp' is assigned a value but never used.","'setTemp' is assigned a value but never used.","'findedCity' is assigned a value but never used.","'setFindedCity' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["145"],"'combineReducers' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has missing dependencies: 'apiKey', 'cityList', and 'currentWeather'. Either include them or remove the dependency array.",["146"],"'isLogged' is assigned a value but never used.","'selectedCity' is assigned a value but never used.","'CChartRadar' is defined but never used.","'useDispatch' is defined but never used.","'radarDatas' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cityList' and 'getTemps'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'cityList'. Either include it or remove the dependency array.",["148"],"'useContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [dispatch, loader]",{"range":"157","text":"158"},"Update the dependencies array to be: [apiKey, cityList, currentWeather]",{"range":"159","text":"160"},"Update the dependencies array to be: [cityList, getTemps, selectedCity]",{"range":"161","text":"162"},"Update the dependencies array to be: [cityList, selectedCity]",{"range":"163","text":"164"},[1352,1360],"[dispatch, loader]",[1523,1525],"[apiKey, cityList, currentWeather]",[2376,2390],"[cityList, getTemps, selectedCity]",[1790,1804],"[cityList, selectedCity]"]
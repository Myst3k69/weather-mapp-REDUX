[{"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\index.js":"1","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\App.js":"2","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\HomePage.js":"3","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Weather.js":"4","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\store.js":"5","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\index.js":"6","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\isLogged.js":"7","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\actions\\index.js":"8","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\cityList.js":"9","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\services\\useAPI.js":"10","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Nav.js":"11","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\LineChart.js":"12","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\RadarChart.js":"13","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\selectCity.js":"14"},{"size":434,"mtime":1607783335883,"results":"15","hashOfConfig":"16"},{"size":400,"mtime":1607830398059,"results":"17","hashOfConfig":"16"},{"size":2572,"mtime":1607832221431,"results":"18","hashOfConfig":"16"},{"size":2923,"mtime":1607829662421,"results":"19","hashOfConfig":"16"},{"size":259,"mtime":1607830405659,"results":"20","hashOfConfig":"16"},{"size":311,"mtime":1607805110229,"results":"21","hashOfConfig":"16"},{"size":184,"mtime":1607680080524,"results":"22","hashOfConfig":"16"},{"size":628,"mtime":1607828360626,"results":"23","hashOfConfig":"16"},{"size":544,"mtime":1607830500134,"results":"24","hashOfConfig":"16"},{"size":1565,"mtime":1607830458289,"results":"25","hashOfConfig":"16"},{"size":1296,"mtime":1607830518675,"results":"26","hashOfConfig":"16"},{"size":3201,"mtime":1607829394285,"results":"27","hashOfConfig":"16"},{"size":2747,"mtime":1607830433077,"results":"28","hashOfConfig":"16"},{"size":217,"mtime":1607830480568,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"crrxxl",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\index.js",["62"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store'\nimport {Provider, provider} from 'react-redux'\n\n\n\nimport { BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n",["63","64"],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\App.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\HomePage.js",["65","66","67","68","69"],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Weather.js",["70","71","72","73","74","75","76","77"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport LineChart from \"./LineChart\";\r\nimport RadarChart from \"./RadarChart\";\r\nimport Nav from \"./Nav\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useFetch from \"../services/useAPI\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { login } from \"../actions\";\r\nimport { resetCity } from \"../actions\";\r\nimport { seletCity } from \"../actions\";\r\nimport { CRow, CCol } from \"@coreui/react\";\r\n\r\nimport(\"../App.css\");\r\nimport(\"react-loader-spinner/dist/loader/css/react-spinner-loader.css\");\r\n\r\nconst Weather = () => {\r\n  // History\r\n\r\n  let history = useHistory();\r\n  // Store\r\n  const cityList = useSelector((state) => state.cities);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //custom Hook\r\n  const [loader, setLoader] = useFetch(cityList);\r\n\r\n  //Constants\r\n\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\n  //states\r\n  const [temp, setTemp] = useState();\r\n  const [findedCity, setFindedCity] = useState(true);\r\n\r\n  // Function to clean datas before coming back on Home Page\r\n\r\n  const backHome = () => {\r\n    history.push(\"/\");\r\n    dispatch(seletCity(\"\"));\r\n    dispatch(resetCity());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loader == true) {\r\n      dispatch(login());\r\n    }\r\n  }, [loader]);\r\n\r\n  return (\r\n    <>\r\n      {/* Display a loader while API fetching */}\r\n\r\n      {!loader ? (\r\n        <Loader\r\n          type=\"Puff\"\r\n          color=\"#00BFFF\"\r\n          height={100}\r\n          width={100}\r\n          style={{ marginLeft: \"50%\", marginTop: \"20%\" }}\r\n        />\r\n      ) : (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <h1>React Weather App</h1>\r\n\r\n            <button className=\"homeButton\" onClick={() => backHome()}>Autres villes </button>\r\n          </header>\r\n          {/* Display error message if city has not been found */}\r\n          {cityList.length > 0 ? (\r\n            <>\r\n              {/* Change the background hot/cold depending on temperature */}\r\n\r\n              <main>\r\n                <CRow>\r\n                  <CCol md=\"2\">\r\n                    <Nav className=\"navCity\"></Nav>\r\n                  </CCol>\r\n                  <CCol md=\"5\">\r\n                    <LineChart></LineChart>\r\n                  </CCol>\r\n                  <CCol md=\"5\">\r\n                    <RadarChart></RadarChart>\r\n                  </CCol>\r\n                </CRow>\r\n              </main>\r\n\r\n              <footer>\r\n                <h3>Test technique SAFECUBE</h3>{\" \"}\r\n              </footer>\r\n            </>\r\n          ) : (\r\n            <h3 style={{ textAlign: \"center\" }}>\r\n              Ville non trouv√©e. Merci de saisir un autre nom de ville :{\" \"}\r\n              <Link to=\"/\">Ici</Link>\r\n            </h3>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\store.js",["78"],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\index.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\isLogged.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\actions\\index.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\cityList.js",[],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\services\\useAPI.js",["79","80"],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\Nav.js",["81","82"],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\LineChart.js",["83","84","85","86","87"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { CCard, CCardBody, CCardHeader } from \"@coreui/react\";\r\nimport { CChartLine, CChartRadar } from \"@coreui/react-chartjs\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n\r\nimport(\"../App.css\");\r\n\r\nconst LineChart = () => {\r\n  // Store\r\n  const cityList = useSelector((state) => state.cities);\r\n  const selectedCity = useSelector((state) => state.selectedCity);\r\n  const [dateForecast, setDateForecast] = useState();\r\n  const [temperature, setTemperature] = useState([]);\r\n\r\n  //Function to get datas for line chart\r\n\r\n  const getTemps = (selectedCity, cityList) => {\r\n    if (selectedCity) {\r\n      const selected = cityList.filter(\r\n        (city) => city.city == selectedCity[0].selectedCity\r\n      );\r\n\r\n      if (selected) {\r\n        //Get forecast days\r\n        getForecastDays(selected);\r\n\r\n        // Get datas for radar chart\r\n        const radarDatas = selected[0].forecastTemp.map((day) => {\r\n          const datas = {};\r\n          datas.humidity = day.clouds;\r\n          datas.uvi = day.uvi;\r\n          datas.pressure = day.pressure;\r\n          datas.winspeed = day.wind_speed;\r\n          datas.pop = day.pop;\r\n          datas.icon = `http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`;\r\n\r\n          return datas;\r\n        });\r\n\r\n        // Get temperatures\r\n        const forecastTemp = selected[0].forecastTemp.map(\r\n          (day) => day.temp[\"day\"]\r\n        );\r\n\r\n        return forecastTemp;\r\n      }\r\n    } else {\r\n      const forecastTemp = cityList[0].forecastTemp.map(\r\n        (day) => day.temp[\"day\"]\r\n      );\r\n      return forecastTemp;\r\n    }\r\n  };\r\n\r\n  //Function to get forecast days\r\n  const getForecastDays = (selected) => {\r\n   \r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n\r\n    const forecastDays = selected[0].forecastTemp.map((day, i) => {\r\n      const dayWeather = [];\r\n      dayWeather[i] = days[new Date(day.dt * 1000).getDay()];\r\n\r\n      return dayWeather;\r\n    });\r\n\r\n    //Set days in state for chart label\r\n\r\n    const filtered = forecastDays.filter((day, i) => day.splice(0, i));\r\n    setDateForecast(filtered);\r\n\r\n    return forecastDays;\r\n  };\r\n\r\n  useEffect(() => {\r\n   \r\n    setTemperature(getTemps(selectedCity, cityList));\r\n  }, [selectedCity]);\r\n\r\n  return (\r\n    <>\r\n      {temperature ? (\r\n        <CCard>\r\n          <CCardHeader>Pr√©visions des temp√©ratures </CCardHeader>\r\n          <CCardBody>\r\n            <CChartLine\r\n              type=\"line\"\r\n              label=\"Temperatures\"\r\n              datasets={[\r\n                {\r\n                  backgroundColor: \"rgb(228,102,81,0.9)\",\r\n                  label: \"Temperatures\",\r\n                  data: temperature,\r\n                 \r\n                },\r\n               \r\n              ]}\r\n              options={{\r\n                tooltips: {\r\n                  enabled: true,\r\n                },\r\n              }}\r\n              labels={dateForecast}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\containers\\RadarChart.js",["88","89"],"C:\\Users\\Aurel\\Documents\\GitHub\\Tests techniques\\test-wecount\\weathermapp\\src\\reducers\\selectCity.js",[],{"ruleId":"90","severity":1,"message":"91","line":6,"column":19,"nodeType":"92","messageId":"93","endLine":6,"endColumn":27},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"90","severity":1,"message":"98","line":12,"column":18,"nodeType":"92","messageId":"93","endLine":12,"endColumn":27},{"ruleId":"99","severity":1,"message":"100","line":31,"column":17,"nodeType":"101","messageId":"102","endLine":31,"endColumn":19},{"ruleId":"99","severity":1,"message":"100","line":31,"column":34,"nodeType":"101","messageId":"102","endLine":31,"endColumn":36},{"ruleId":"99","severity":1,"message":"100","line":31,"column":53,"nodeType":"101","messageId":"102","endLine":31,"endColumn":55},{"ruleId":"99","severity":1,"message":"100","line":31,"column":71,"nodeType":"101","messageId":"102","endLine":31,"endColumn":73},{"ruleId":"90","severity":1,"message":"103","line":28,"column":18,"nodeType":"92","messageId":"93","endLine":28,"endColumn":27},{"ruleId":"90","severity":1,"message":"104","line":32,"column":9,"nodeType":"92","messageId":"93","endLine":32,"endColumn":15},{"ruleId":"90","severity":1,"message":"105","line":35,"column":10,"nodeType":"92","messageId":"93","endLine":35,"endColumn":14},{"ruleId":"90","severity":1,"message":"106","line":35,"column":16,"nodeType":"92","messageId":"93","endLine":35,"endColumn":23},{"ruleId":"90","severity":1,"message":"107","line":36,"column":10,"nodeType":"92","messageId":"93","endLine":36,"endColumn":20},{"ruleId":"90","severity":1,"message":"108","line":36,"column":22,"nodeType":"92","messageId":"93","endLine":36,"endColumn":35},{"ruleId":"99","severity":1,"message":"109","line":47,"column":16,"nodeType":"101","messageId":"102","endLine":47,"endColumn":18},{"ruleId":"110","severity":1,"message":"111","line":50,"column":6,"nodeType":"112","endLine":50,"endColumn":14,"suggestions":"113"},{"ruleId":"90","severity":1,"message":"114","line":1,"column":23,"nodeType":"92","messageId":"93","endLine":1,"endColumn":38},{"ruleId":"90","severity":1,"message":"115","line":2,"column":23,"nodeType":"92","messageId":"93","endLine":2,"endColumn":34},{"ruleId":"110","severity":1,"message":"116","line":65,"column":6,"nodeType":"112","endLine":65,"endColumn":8,"suggestions":"117"},{"ruleId":"90","severity":1,"message":"118","line":10,"column":9,"nodeType":"92","messageId":"93","endLine":10,"endColumn":17},{"ruleId":"90","severity":1,"message":"119","line":11,"column":9,"nodeType":"92","messageId":"93","endLine":11,"endColumn":21},{"ruleId":"90","severity":1,"message":"120","line":4,"column":22,"nodeType":"92","messageId":"93","endLine":4,"endColumn":33},{"ruleId":"90","severity":1,"message":"121","line":5,"column":23,"nodeType":"92","messageId":"93","endLine":5,"endColumn":34},{"ruleId":"99","severity":1,"message":"109","line":22,"column":29,"nodeType":"101","messageId":"102","endLine":22,"endColumn":31},{"ruleId":"90","severity":1,"message":"122","line":30,"column":15,"nodeType":"92","messageId":"93","endLine":30,"endColumn":25},{"ruleId":"110","severity":1,"message":"123","line":88,"column":6,"nodeType":"112","endLine":88,"endColumn":20,"suggestions":"124"},{"ruleId":"99","severity":1,"message":"109","line":25,"column":29,"nodeType":"101","messageId":"102","endLine":25,"endColumn":31},{"ruleId":"110","severity":1,"message":"125","line":58,"column":6,"nodeType":"112","endLine":58,"endColumn":20,"suggestions":"126"},"no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["127"],"no-negated-in-lhs",["128"],"'setCities' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setLoader' is assigned a value but never used.","'apiKey' is assigned a value but never used.","'temp' is assigned a value but never used.","'setTemp' is assigned a value but never used.","'findedCity' is assigned a value but never used.","'setFindedCity' is assigned a value but never used.","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["129"],"'combineReducers' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has missing dependencies: 'apiKey', 'cityList', and 'currentWeather'. Either include them or remove the dependency array.",["130"],"'isLogged' is assigned a value but never used.","'selectedCity' is assigned a value but never used.","'CChartRadar' is defined but never used.","'useDispatch' is defined but never used.","'radarDatas' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cityList' and 'getTemps'. Either include them or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'cityList'. Either include it or remove the dependency array.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},"Update the dependencies array to be: [dispatch, loader]",{"range":"141","text":"142"},"Update the dependencies array to be: [apiKey, cityList, currentWeather]",{"range":"143","text":"144"},"Update the dependencies array to be: [cityList, getTemps, selectedCity]",{"range":"145","text":"146"},"Update the dependencies array to be: [cityList, selectedCity]",{"range":"147","text":"148"},[1352,1360],"[dispatch, loader]",[1523,1525],"[apiKey, cityList, currentWeather]",[2376,2390],"[cityList, getTemps, selectedCity]",[1790,1804],"[cityList, selectedCity]"]